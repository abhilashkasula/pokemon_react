{"version":3,"sources":["pokemon.js","pokemons.js","filteredPokemons.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","className","name","src","imgUrl","alt","Pokemons","pokemons","map","poke","key","img","FilteredPokemons","state","filter","onChange","e","handleChange","target","value","this","setState","includes","placeholder","React","Component","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2v4BAYeA,G,MATC,SAACC,GACf,OACE,yBAAKC,UAAU,WACb,2BAAID,EAAME,MACV,yBAAKC,IAAKH,EAAMI,OAAQC,IAAKL,EAAME,UCK1BI,G,MARE,SAACN,GAChB,IAAMO,EAAWP,EAAMO,SAASC,KAAI,SAACC,GAAD,OAClC,kBAAC,EAAD,CAASC,IAAKD,EAAKP,KAAMA,KAAMO,EAAKP,KAAME,OAAQK,EAAKE,SAGzD,OAAO,yBAAKV,UAAU,YAAYM,KC2BrBK,G,wDA/Bb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CAACC,OAAQ,IACtB,EAAKC,SAAW,SAACC,GAAD,OAAO,EAAKC,aAAaD,EAAEE,OAAOC,QAHjC,E,yDAMNL,GACXM,KAAKC,UAAS,iBAAO,CAACP,e,+BAGd,IAAD,OACP,OAAOM,KAAKpB,MAAMO,SAASO,QAAO,SAACL,GAAD,OAChCA,EAAKP,KAAKoB,SAAS,EAAKT,MAAMC,a,+BAKhC,OACE,yBAAKb,UAAU,mBACb,2BACEkB,MAAOC,KAAKP,MAAMC,OAClBC,SAAUK,KAAKL,SACfd,UAAU,SACVsB,YAAY,WAEd,kBAAC,EAAD,CAAUhB,SAAUa,KAAKN,gB,GA1BFU,IAAMC,YCQtBC,G,MAPH,kBACV,yBAAKzB,UAAU,aACb,wBAAIA,UAAU,eAAd,mBACA,kBAAC,EAAD,CAAkBM,SAAUoB,OCIZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aab021bd.chunk.js","sourcesContent":["import React from 'react';\nimport './pokemon.css';\n\nconst Pokemon = (props) => {\n  return (\n    <div className=\"pokemon\">\n      <p>{props.name}</p>\n      <img src={props.imgUrl} alt={props.name}></img>\n    </div>\n  );\n};\n\nexport default Pokemon;\n","import React from 'react';\nimport Pokemon from './pokemon';\nimport './pokemons.css';\n\nconst Pokemons = (props) => {\n  const pokemons = props.pokemons.map((poke) => (\n    <Pokemon key={poke.name} name={poke.name} imgUrl={poke.img} />\n  ));\n\n  return <div className='pokemons'>{pokemons}</div>;\n};\n\nexport default Pokemons;\n","import React from 'react';\nimport Pokemons from './pokemons';\nimport './filteredPokemons.css';\n\nclass FilteredPokemons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {filter: ''};\n    this.onChange = (e) => this.handleChange(e.target.value);\n  }\n\n  handleChange(filter) {\n    this.setState(() => ({filter}));\n  }\n\n  filter() {\n    return this.props.pokemons.filter((poke) =>\n      poke.name.includes(this.state.filter)\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"filter-pokemons\">\n        <input\n          value={this.state.filter}\n          onChange={this.onChange}\n          className=\"search\"\n          placeholder=\"filter\"\n        />\n        <Pokemons pokemons={this.filter()} />\n      </div>\n    );\n  }\n}\n\nexport default FilteredPokemons;\n","import React from 'react';\nimport * as data from './pokemon.json';\nimport FilteredPokemons from './filteredPokemons';\nimport './App.css'\n\nconst App = () => (\n  <div className=\"container\">\n    <h1 className=\"app-heading\">Pokemon Gallery</h1>\n    <FilteredPokemons pokemons={data.default} />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}